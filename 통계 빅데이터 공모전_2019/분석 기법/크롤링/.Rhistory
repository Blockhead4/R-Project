idx <- str_locate(tmp, "\r")
writer <- c(writer, str_sub(tmp, 1, idx[1]-1))
tmp <- trim(str_sub(tmp, idx[1], -1))
idx <- str_locate(tmp, "\r")
time <- c(time, str_sub(tmp, 1, idx[1]-1))
#print(time)
}
result <- data.frame(score=score, review=review, writer=writer, time=time)
reviews <- rbind.data.frame(reviews, result)
review
result
reviews <- rbind(reviews, result)
reviews
reviews <- c()
for(i in 1:length(pages)) {
url_all <- paste0(ifr_base_url, pages[i])
html <- read_html(url_all)
html %>%
html_node('div.score_result') %>%
html_nodes('li') -> lis
score <- c()
writer <- c()
review <- c()
time <- c()
for (li in lis) {
score <- c(score, html_node(li, '.star_score') %>% html_text('em') %>% trim())
li %>%
html_node('.score_reple') %>%
html_text('p') %>%
trim() -> tmp
idx <- str_locate(tmp, "\r")
review <- c(review, str_sub(tmp, 1, idx[1]-1))
tmp <- trim(str_sub(tmp, idx[1], -1))
idx <- str_locate(tmp, "\r")
writer <- c(writer, str_sub(tmp, 1, idx[1]-1))
tmp <- trim(str_sub(tmp, idx[1], -1))
idx <- str_locate(tmp, "\r")
time <- c(time, str_sub(tmp, 1, idx[1]-1))
#print(time)
}
result <- data.frame(score=score, review=review, writer=writer, time=time)
reviews <- rbind.data.frame(reviews, result)
}
reviews
url <- 'https://front.wemakeprice.com/deal/600089247?source=dealsearch&search_keyword=%EA%B7%B8%EB%9E%A8&_service=5&no&extservice=ad'
html <- read_html
html <- read_html(url)
html
a <- html_node(html, 'div.review_area')
a
a <- html_nodes(html, 'div.review_area')
a
a <- html_nodes(html, '.tab_conts')
a
a <- html_node(html, '.tab_conts')
a
a <- html_nodes(html, '.review_area')
a
a <- html_node(html, '.review_area')
a <- html_node(html, '.tab_conts')
a <- html_node(html, '.review_area')
a
a <- html_node(html, '.desc_cont')
a
a <- html_node(html, '.tab_conts')
a <- html_node(html, '.desc_cont')
a
a <- html_nodes(html, '.review_area')
a
# NAVER 영화 ('스파이더맨 : 파프롬 홈') 일반인 리뷰 크롤링
ifr_base_url <- 'https://movie.naver.com/movie/bi/mi/pointWriteFormList.nhn?code=173123&type=after&isActualPointWriteExecute=false&isMileageSubscriptionAlready=false&isMileageSubscriptionReject=false&page='
pages <- c(1:242)
reviews <- c()
for(i in 1:length(pages)) {
url_all <- paste0(ifr_base_url, pages[i])
html <- read_html(url_all)
html %>%
html_node('div.score_result') %>%
html_nodes('li') -> lis
score <- c()
writer <- c()
review <- c()
time <- c()
for (li in lis) {
score <- c(score, html_node(li, '.star_score') %>% html_text('em') %>% trim())
li %>%
html_node('.score_reple') %>%
html_text('p') %>%
trim() -> tmp
idx <- str_locate(tmp, "\r")
review <- c(review, str_sub(tmp, 1, idx[1]-1))
tmp <- trim(str_sub(tmp, idx[1], -1))
idx <- str_locate(tmp, "\r")
writer <- c(writer, str_sub(tmp, 1, idx[1]-1))
tmp <- trim(str_sub(tmp, idx[1], -1))
idx <- str_locate(tmp, "\r")
time <- c(time, str_sub(tmp, 1, idx[1]-1))
#print(time)
}
result <- data.frame(score=score, review=review, writer=writer, time=time)
reviews <- rbind.data.frame(reviews, result)
}
library(xlsx)
write.xlsx(reviews, "D:/workspace-Jwp/R/R-Project/01_Crowling/reviews.xlsx")
# NAVER 영화 ('스파이더맨 : 파프롬 홈') 일반인 리뷰 크롤링
library(rvest)
library(stringr)
library(dplyr)
library(xlsx)
library(rJava)
library(KoNLP)
library(wordcloud)
library(RColorBrewer)
library(ggplot2)
library(KoNLP)
# NAVER 영화 ('스파이더맨 : 파프롬 홈') 일반인 리뷰 크롤링
library(rvest)
library(stringr)
library(dplyr)
library(xlsx)
library(rJava)
library(wordcloud)
library(RColorBrewer)
library(ggplot2)
library(KoNLP)
install.packages("KoNLP")
library(KoNLP)
install.packages("KoNLP")
library(rJava)
library(KoNLP)
library(rJava)
# NAVER 영화 ('스파이더맨 : 파프롬 홈') 일반인 리뷰 크롤링
library(rvest)
library(stringr)
library(dplyr)
library(xlsx)
library(rJava)
library(wordcloud)
library(RColorBrewer)
library(ggplot2)
library(KoNLP)
# NAVER 영화 ('스파이더맨 : 파프롬 홈') 일반인 리뷰 크롤링
library(rvest)
library(stringr)
library(dplyr)
library(xlsx)
library(rJava)
library(wordcloud)
library(RColorBrewer)
library(ggplot2)
library(KoNLP)
useSejongDic()
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jdk1.8.0_202")
library(rJava)
library(KoNLP)
# NAVER 영화 ('스파이더맨 : 파프롬 홈') 일반인 리뷰 크롤링
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jdk1.8.0_202/")
library(rvest)
library(stringr)
library(dplyr)
library(xlsx)
library(rJava)
library(wordcloud)
library(RColorBrewer)
library(ggplot2)
library(KoNLP)
# NAVER 영화 ('스파이더맨 : 파프롬 홈') 일반인 리뷰 크롤링
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jdk1.8.0_202/")
library(rvest)
library(stringr)
library(dplyr)
library(xlsx)
library(rJava)
library(wordcloud)
library(RColorBrewer)
library(ggplot2)
library(KoNLP)
library(rJava)
library(KoNLP)
# NAVER 영화 ('스파이더맨 : 파프롬 홈') 일반인 리뷰 크롤링
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jre1.8.0_211")
library(rJava)
library(KoNLP)
# NAVER 영화 ('스파이더맨 : 파프롬 홈') 일반인 리뷰 크롤링
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jre1.8.0_211")
library(rvest)
library(stringr)
library(dplyr)
library(xlsx)
library(rJava)
library(KoNLP)
library(wordcloud)
library(RColorBrewer)
library(ggplot2)
# NAVER 영화 ('스파이더맨 : 파프롬 홈') 일반인 리뷰 크롤링
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jre1.8.0_211/")
library(rvest)
library(stringr)
library(dplyr)
library(xlsx)
library(rJava)
library(KoNLP)
library(wordcloud)
library(RColorBrewer)
library(ggplot2)
# NAVER 영화 ('스파이더맨 : 파프롬 홈') 일반인 리뷰 크롤링
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jdk1.8.0_211/")
library(rvest)
library(stringr)
library(dplyr)
library(xlsx)
library(rJava)
library(KoNLP)
library(wordcloud)
library(RColorBrewer)
library(ggplot2)
useSejongDic()
install.packages("rJava")
install.packages("rJava")
library(rJava)
library(rJava)
install.packages("rJava")
# NAVER 영화 ('스파이더맨 : 파프롬 홈') 일반인 리뷰 크롤링
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jdk1.8.0_211/")
library(rvest)
library(stringr)
library(dplyr)
library(xlsx)
library(rJava)
library(KoNLP)
library(wordcloud)
library(RColorBrewer)
library(ggplot2)
install.packages("rJava")
install.packages("rJava")
library(rJava)
library(rJava)
library(rJava)
# NAVER 영화 [ 스파이더맨 : 파프롬 홈 ] 일반인 리뷰 크롤링
library(rvest)
library(stringr)
library(dplyr)
library(xlsx)
library(rJava)
library(KoNLP)
library(rJava)
library(KoNLP)
# NAVER 영화 [ 스파이더맨 : 파프롬 홈 ] 일반인 리뷰 크롤링
install.packages("rJava")
install.packages("rJava")
library(rJava)
library(KoNLP)
a <- data.frame(c(1:100), c(rep('a', 'b', 50)))
a
a <- data.frame(c(1:100), c(rep('a', 'b', each=50)))
?rep
a <- data.frame(c(1:100), c(rep('a', 'b', each=T)))
rep(1, 2)
a <- data.frame(c(1:100), rep(c('a', 'b'), each=50)))
rep(c(1, 2), 3)
rep(c(1, 2), each=T)
rep(c(1, 2), 30, each=T)
rep(c(1, 2, 2), 30, each=T)
rep(c(1, 2, 2), 30)
rep(c('a','b'), each=2)
rep(c('a','b'), 2)
a <- data.frame(c(1:100), rep(c('a', 'b'), 50)))
a <- data.frame(c(1:100), rep(c('a', 'b'), 100)))
a <- data.frame(c(1:100), rep(c('a', 'b'), 100))
aa
a
a <- data.frame(c(1:100), rep(c('a', 'b'), 50)
a <- data.frame(c(1:100), rep(c('a', 'b'), 50))
?rep
a
b <- data.frame(rep(c('a', 'b'), 50), rep(c('123214', '898908'), 50))
b
?merge
setwd("D:/Workplace/StatisticsKorea_Big_Data_Project/크롤링")
positive <- readLines("D:/Workplace/StatisticsKorea_Big_Data_Project/크롤링/군산대 감성사전/positive.txt",
encoding="EUC-KR")
positive <- readLines("positive.txt",
encoding="EUC-KR")
setwd("D:/workspace-Jwp/R/R-Project/통계 빅데이터 공모전_2019/분석 기법/크롤링")
positive <- readLines("positive.txt",
encoding="EUC-KR")
positive <- positive[-1]
positive <- readLines("positive.txt",
encoding="EUC-KR")
positive
positive[-1]
positive
positive[-1]
str(positive)
summarise(positive)
summary(positive)
negative <- readLines("negative.txt",
encoding="EUC-KR")
length(positive)
positive[1]
positive[-1]
positive[2]
positive[0]
positive[20]
positive[50]
positive[-1]
str(positve)
str(positive)
negative <- readLines("negative.txt",
encoding="EUC-KR")
negative <- negative[-1]
negative <- negative[-1]
sentimental <- function(sentences, positive, negative) {
scores <- laply(sentences, function(sentence, positive, negative) {
sentence <- gsub('[[:punct:]]','',sentence) # 문장부호 제거
sentence <- gsub('[[:cntrl:]]','',sentence) # 특수문자 제거
sentence <- gsub('\\d+','',sentence) # 숫자 제거
word.list <- str_split(sentence,'\\s+') # 공백 기준으로 단어 생성 -> \\s+ : 공백 정규식, +(1개이상)
words <- unlist(word.list) # unlist() : list를 vector 객체로 구조변경
pos.matches <- match(words,positive) # words의 단어를 positive에서 matching
neg.matches <- match(words,negative)
pos.matches <- !is.na(pos.matches) # NA 제거, 위치(숫자)만 추출
neg.matches <- !is.na(neg.matches)
score <- sum(pos.matches) - sum(neg.matches) # 긍정 - 부정
return(score)
}, positive, negative)
scores.df <- data.frame(score=scores,text=sentences)
return(scores.df)
}
result <- sentimental(babymom, positive, negative)
result$color[result$score >= 1] <- "blue"
result$color[result$score == 0] <- "green"
result$color[result$score < 0] <- "red"
library(plyr)
library(stringr)
setwd("D:/workspace-Jwp/R/R-Project/통계 빅데이터 공모전_2019/분석 기법/크롤링")
positive <- readLines("positive.txt",
encoding="EUC-KR")
positive <- positive[-1]
negative <- readLines("negative.txt",
encoding="EUC-KR")
negative <- negative[-1]
sentimental <- function(sentences, positive, negative) {
scores <- laply(sentences, function(sentence, positive, negative) {
sentence <- gsub('[[:punct:]]','',sentence) # 문장부호 제거
sentence <- gsub('[[:cntrl:]]','',sentence) # 특수문자 제거
sentence <- gsub('\\d+','',sentence) # 숫자 제거
word.list <- str_split(sentence,'\\s+') # 공백 기준으로 단어 생성 -> \\s+ : 공백 정규식, +(1개이상)
words <- unlist(word.list) # unlist() : list를 vector 객체로 구조변경
pos.matches <- match(words,positive) # words의 단어를 positive에서 matching
neg.matches <- match(words,negative)
pos.matches <- !is.na(pos.matches) # NA 제거, 위치(숫자)만 추출
neg.matches <- !is.na(neg.matches)
score <- sum(pos.matches) - sum(neg.matches) # 긍정 - 부정
return(score)
}, positive, negative)
scores.df <- data.frame(score=scores,text=sentences)
return(scores.df)
}
result <- sentimental(babymom, positive, negative)
result$color[result$score >= 1] <- "blue"
result$color[result$score == 0] <- "green"
urlStr <- "https://openapi.naver.com/v1/search/blog.xml?" # 기본 url 생성
searchString <- "query=육아" # 쿼리생성
searchString <- iconv(searchString, to="UTF-8") # 인코딩
searchString <- URLencode(searchString)
searchString
etcString <- "&display=100&start=1&sort=sim"
reqUrl <- paste(urlStr, searchString, etcString, sep="")
reqUrl # 요청할 url 생성
install.packages("httr")
library(httr)
clientid <- "054n6IEfBZCo9_YTAgR7" # 개인 api id 값
clientSecret <- "BejMyaYzl0" # 개인 apu secret 값
apiResult <- GET(reqUrl, add_headers("X-Naver-Client-Id"=clientid,
"X-Naver-Client-Secret"=clientSecret))
apiResult # Status 값이 200이어야 정상. 500 이면 시스템 에러
str(apiResult)
apiResult$content
result <- rawToChar(apiResult$content)
result
Encoding(result) <- "UTF-8"
result
library(rJava)
library(KoNLP)
library(wordcloud)
library(wordcloud2)
library(RColorBrewer)
useSejongDic()
library(dplyr)
library(stringr)
babymom <- gsub("<(\\/?)(\\w+)*([^<>]*)>", " ", result)
babymom <- gsub("[[:punct:]]", " ", babymom) # 특수문자 제거
babymom <- gsub("[A-z]", " ", babymom) # 모든 영문자 제거
babymom <- gsub("[0-9]", " ", babymom) # 숫자 제거
babymom <- gsub(" +", " ", babymom)
babymom <- gsub("^"," ", babymom)
babymom <- gsub("ㅋ"," ", babymom)
library(wordcloud2)
install.packages("wordcloud2")
library(wordcloud2)
clientid <- "054n6IEfBZCo9_YTAgR7" # 개인 api id 값
clientSecret <- "BejMyaYzl0" # 개인 apu secret 값
apiResult <- GET(reqUrl, add_headers("X-Naver-Client-Id"=clientid,
"X-Naver-Client-Secret"=clientSecret))
apiResult # Status 값이 200이어야 정상. 500 이면 시스템 에러
str(apiResult)
apiResult$content
result <- rawToChar(apiResult$content)
result
Encoding(result) <- "UTF-8"
result
library(rJava)
library(KoNLP)
library(wordcloud)
library(wordcloud2)
library(RColorBrewer)
useSejongDic()
library(dplyr)
library(stringr)
babymom <- gsub("<(\\/?)(\\w+)*([^<>]*)>", " ", result)
babymom <- gsub("[[:punct:]]", " ", babymom) # 특수문자 제거
babymom <- gsub("[A-z]", " ", babymom) # 모든 영문자 제거
babymom <- gsub("[0-9]", " ", babymom) # 숫자 제거
babymom <- gsub(" +", " ", babymom)
babymom <- gsub("^"," ", babymom)
babymom <- gsub("ㅋ"," ", babymom)
babymom <- gsub("ㅎ"," ", babymom)
babymom <- gsub("ㅜ"," ", babymom)
babymom <- gsub("개월아기","아기",babymom)
babymom
babymom <- sapply(babymom,extractNoun,USE.NAMES=F)
babymom <- unlist(babymom)
babymom <- Filter(function(x) {nchar(x)>=2 & nchar(x)<=5}, babymom)
wordcount <- table(babymom)
head(sort(wordcount,decreasing=T),100)
require(wordcloud2)
wordcloud2(wordcount[wordcount>3],size=8,col="random-dark",rotateRatio=0.5,
backgroundColor="white",shape="circle")
library(plyr)
library(stringr)
setwd("D:/workspace-Jwp/R/R-Project/통계 빅데이터 공모전_2019/분석 기법/크롤링")
positive <- readLines("positive.txt",
encoding="EUC-KR")
positive <- positive[-1]
negative <- readLines("negative.txt",
encoding="EUC-KR")
negative <- negative[-1]
sentimental <- function(sentences, positive, negative) {
scores <- laply(sentences, function(sentence, positive, negative) {
sentence <- gsub('[[:punct:]]','',sentence) # 문장부호 제거
sentence <- gsub('[[:cntrl:]]','',sentence) # 특수문자 제거
sentence <- gsub('\\d+','',sentence) # 숫자 제거
word.list <- str_split(sentence,'\\s+') # 공백 기준으로 단어 생성 -> \\s+ : 공백 정규식, +(1개이상)
words <- unlist(word.list) # unlist() : list를 vector 객체로 구조변경
pos.matches <- match(words,positive) # words의 단어를 positive에서 matching
neg.matches <- match(words,negative)
pos.matches <- !is.na(pos.matches) # NA 제거, 위치(숫자)만 추출
neg.matches <- !is.na(neg.matches)
score <- sum(pos.matches) - sum(neg.matches) # 긍정 - 부정
return(score)
}, positive, negative)
scores.df <- data.frame(score=scores,text=sentences)
return(scores.df)
}
result <- sentimental(babymom, positive, negative)
result$color[result$score >= 1] <- "blue"
result$color[result$score == 0] <- "green"
result$color[result$score < 0] <- "red"
table(result$color)
result$remark[result$score >= 1] <- "긍정"
result$remark[result$score == 0] <- "중립"
result$remark[result$score < 0] <- "부정"
sentiment_result <- table(result$remark)
pie(sentimental_result,main="감성분석 결과",col=c("blue","red","green"),radius=0.8)
install.packages("wordcloud2")
install.packages("wordcloud2")
positive <- readLines("positive.txt",
encoding="EUC-KR")
positive <- positive[-1]
negative <- readLines("negative.txt",
encoding="EUC-KR")
negative <- negative[-1]
sentimental <- function(sentences, positive, negative) {
scores <- laply(sentences, function(sentence, positive, negative) {
sentence <- gsub('[[:punct:]]','',sentence) # 문장부호 제거
sentence <- gsub('[[:cntrl:]]','',sentence) # 특수문자 제거
sentence <- gsub('\\d+','',sentence) # 숫자 제거
word.list <- str_split(sentence,'\\s+') # 공백 기준으로 단어 생성 -> \\s+ : 공백 정규식, +(1개이상)
words <- unlist(word.list) # unlist() : list를 vector 객체로 구조변경
pos.matches <- match(words,positive) # words의 단어를 positive에서 matching
neg.matches <- match(words,negative)
pos.matches <- !is.na(pos.matches) # NA 제거, 위치(숫자)만 추출
neg.matches <- !is.na(neg.matches)
score <- sum(pos.matches) - sum(neg.matches) # 긍정 - 부정
return(score)
}, positive, negative)
scores.df <- data.frame(score=scores,text=sentences)
return(scores.df)
}
result <- sentimental(babymom, positive, negative)
result$color[result$score >= 1] <- "blue"
result$color[result$score == 0] <- "green"
result$color[result$score < 0] <- "red"
table(result$color)
result$remark[result$score >= 1] <- "긍정"
result$remark[result$score == 0] <- "중립"
result$remark[result$score < 0] <- "부정"
sentiment_result <- table(result$remark)
pie(sentimental_result,main="감성분석 결과",col=c("blue","red","green"),radius=0.8)
sentiment_result
pie(sentiment_result, main="감성분석 결과",col=c("blue","red","green"),radius=0.8)
